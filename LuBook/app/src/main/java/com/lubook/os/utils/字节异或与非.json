{
  "位逻辑 与 运算": {
    "运算的规则：1与1等于1，1与0等于0": "比如：10010001 & 11110000 = 10010000（二进制）"
  },
  "位逻辑 或 运算": {
    "或运算的规则是：1或1等1，1或0等于1 ,0或0等于0 ": "比如10010001（二进制）| 11110000（二进制）等于11110001（二进制）"
  },
  "位逻辑 异或 运算": {
    "异或运算的规则是：1异或1等于0，1异或0等于1，0异或0等于0。即：相同得0，相异得1。": "比如：10010001（二进制）^11110000（二进制）等于01100001（二进制）"
  },
  "位左移 运算": {
    "位左移运算将整个数按位左移若干位，左移后空出的部分0。": "比如：8位的byte型变量,byte a=0x65(即二进制的01100101),将其左移3位：a<<3的结果是0x27(即二进制的00101000)"
  },
  "位右移  运算": {
    "位右移运算将整个数按位右移若干位，右移后空出的部分填0": "比如：8位的byte型变量Byte a=0x65(既（二进制的01100101）)将其右移3位：a>>3的结果是0x0c(二进制00001100)"
  },
  "位逻辑非运算": {
    "位逻辑非运算是单目的，只有一个运算对象。位逻辑非运算按位对运算对象的值进行非运算": "如果某一位等于0，就将其转变为1；如果某一位等于1，就将其转变为0"
  },
  "十进制到十六进制:": "Integer.toHexString()",
  "十进制到八进制:": "Integer.toOctalString()",
  "十进制到二进制:": "Integer.toBinaryString()"
}